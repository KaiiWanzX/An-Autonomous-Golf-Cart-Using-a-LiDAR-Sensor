#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32
from std_msgs.msg import Float64
from sensor_msgs.msg import Joy

class DrivingControlNode(Node):
    def __init__(self):
        super().__init__("driving_control")
        
        # teleop_twist_joy subscribtion
        self.driving_control_ = self.create_subscription(Twist, "/cmd_vel", self.joy_callback, 20)

        # joy subscribtion
        self.brake_sub_ = self.create_subscription(Joy, "/joy", self.brake_callback, 20)

        # speed_setpoint_feedback subscription
        self.speed_feedback_ = self.create_subscription(Int32, "/current_speed_feedback_topic", self.feedback_callback, 20)

        # speed & steering for odom calc
        self.speed_for_odom_pub_ = self.create_publisher(Float64, '/current_speed_for_odom_cal', 20)
        self.steering_for_odom_pub_ = self.create_publisher(Float64, '/steering_for_odom_cal', 20)
        self.timer3_ = self.create_timer(0.2, self.send_odom_command)

         # speed & steering publisher
        self.speed_pub_ = self.create_publisher(Int32, "/speed_setpoint_topic", 10)
        self.steering_angle_pub_ = self.create_publisher(Float64, "/steering_angle_setpoint", 10)
        self.timer_ = self.create_timer(0.5, self.send_speed_command)
        self.timer2_ = self.create_timer(0.5, self.send_angle_command)
        self.get_logger().info("driving control node starts :)")

        # brake publisher
        self.brake_control_ = self.create_publisher(Int32, "/brake_control_topic", 10)
        self.timer4_ = self.create_timer(0.5, self.send_brake_command)

        # control logics
        self.speed_cal = 0
        self.angle_cal = 0.0
        self.old_A = 0
        self.old_B = 0
        #self.brake = 1
        self.print_control = 0
        self.old_feedback = 0
        self.old_speedcal = 0.0
        self.brake_logic = 0
        self.speed_rcv = 0.0

    def joy_callback(self, msg: Twist):
        linear = msg.linear
        angular = msg.angular

        self.speed = linear.x              # (+)forward & (-)reverse 
        self.angle = angular.z              # (+)left & (-)right 
        
        # speed setpoint calculation
        if self.speed > 0.05:
            #self.speed_cal = int((self.speed*100) + 70 )

            self.speed_cal = int((self.speed*400))

            if self.speed_cal != self.old_speedcal:
                #self.get_logger().info("forward   " + str(self.speed_cal)) 
                pass
            else:
                pass

        elif self.speed < -0.05:
            #self.speed_cal = int((self.speed*100) - 70 )

            #self.speed_cal = int((self.speed*400))
            self.speed_cal = int(0)

            if self.speed_cal != self.old_speedcal:
                #self.get_logger().info("reverse   " + str(self.speed_cal))
                pass
            else:
                pass
            
        else:
            self.speed_cal = int(0)

        self.old_speedcal = self.speed_cal
        
        # steering angle setpoint calculation
        if self.angle > 0.1:
            #self.angle_cal = self.angle * 150
            self.angle_cal = self.angle * 180
            #self.get_logger().info("left   " + str(self.angle_cal))
        elif self.angle < -0.1:
            #self.angle_cal = self.angle * 150
            self.angle_cal = self.angle * 180
            #self.get_logger().info("right   " + str(self.angle_cal))
        else:
            pass
        

    def brake_callback(self, msg: Joy):
        self.x_butt = msg.buttons[2]
        self.rightsh1 = msg.buttons[5]
        self.y_butt = msg.buttons[3] # re-checking y button number

        # define speed % steering = 0 when butts aren't pressed.
        if self.rightsh1 == 0:
            if self.x_butt == 0:
                self.speed_cal = 0
                self.angle_cal = 0.0
                if self.print_control == 0:
                    #self.get_logger().info("speed = " + str(self.speed_cal))
                    self.print_control = 1    
                else:
                    pass
                if self.y_butt == 1:
                    self.brake_logic = 1
                elif self.y_butt == 0:
                    self.brake_logic = 0
                    
            else:
                self.print_control = 0
                self.brake_logic = 0
                pass
        else: 
            self.print_control = 0
            self.brake_logic = 0
            pass

    def feedback_callback(self, msg: Int32):
        self.speed_rcv = float(msg.data / 100)
        #if speed_rcv != self.old_feedback:
        #    self.get_logger().info(" \t\t\t feedback = " + str(speed_rcv))
        #else:
        #    pass
        self.get_logger().info(" \t\t\t feedback = " + str(self.speed_rcv)) 
        self.old_feedback = self.speed_rcv

    def send_speed_command(self):
        msg = Int32()
        msg.data = self.speed_cal
        #   self.get_logger().info(str(msg.data) )
        self.speed_pub_.publish(msg)

    def send_angle_command(self):
        msg = Float64()
        msg.data = self.angle_cal
        self.steering_angle_pub_.publish(msg)
    
    def send_brake_command(self):
        msg = Int32()
        msg.data = self.brake_logic
        self.brake_control_.publish(msg) 

    def send_odom_command(self):
        speed_pub = Float64()
        steering_pub = Float64()

        speed_pub.data = self.speed_rcv
        steering_pub.data = self.angle_cal

        self.speed_for_odom_pub_.publish(speed_pub)
        self.steering_for_odom_pub_.publish(steering_pub)



def main(args=None):
    rclpy.init(args=args)
    node = DrivingControlNode()
    rclpy.spin(node)
    rclpy.shutdown()

