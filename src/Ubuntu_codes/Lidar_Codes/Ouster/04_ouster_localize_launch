#!/usr/bin/env python3
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, ExecuteProcess
from launch.conditions import IfCondition, UnlessCondition
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node, SetRemap
from launch_ros.substitutions import FindPackageShare
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import Shutdown
import os

def generate_launch_description():
    ## ***** Launch arguments *****
    load_state_filename_arg = DeclareLaunchArgument('load_state_filename', default_value="/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/map/pbstream/football_field/05-02-67/test2_1round.pbstream")

  ## ***** File paths ******
    pkg_share = FindPackageShare('cartographer_ros').find('cartographer_ros')
    urdf_dir = os.path.join(pkg_share, 'urdf')
    urdf_file = os.path.join(urdf_dir, 'os1.urdf')
    with open(urdf_file, 'r') as infp:
        robot_desc = infp.read()

    ## ***** Nodes *****
    robot_state_publisher_node = Node(
        package = 'robot_state_publisher',
        executable = 'robot_state_publisher',
        parameters=[
            {'robot_description': robot_desc},
            {'use_sim_time': False}],
        output = 'screen'
        )

    cartographer_node = Node(
        package='cartographer_ros',
        executable='cartographer_node',
        parameters=[
            {'use_sim_time': False},
        ],
        arguments=[
            '-configuration_directory', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files',
            '-configuration_basename', 'os1_32 _use3d.lua',  
            '-load_state_filename', LaunchConfiguration('load_state_filename'),
        ],
        remappings=[
            ('points2_1', '/ouster/points'),  
            ('points2_2', '/ouster/points2'),
            ('imu', '/ouster/imu'),
        ],
        output='screen'
    )

    cartographer_node_map = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_node',
        parameters = [{'use_sim_time': False}],
        arguments = [
            '-configuration_directory', FindPackageShare('cartographer_ros').find('cartographer_ros') + '/configuration_files',
            '-configuration_basename', 'backpack_3d_localization.lua', #
            '-load_state_filename', LaunchConfiguration('load_state_filename'),],
        remappings = [
            ('points2_1', 'horizontal_laser_3d'),
            ('points2_2', 'vertical_laser_3d'),
        ],
        output = 'screen'
        )

    cartographer_occupancy_grid_node = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_occupancy_grid_node',
        parameters = [
            {'use_sim_time': False},
            {'resolution': 0.05}],
        )

    rviz_node = Node(
        package = 'rviz2',
        executable = 'rviz2',
        on_exit = Shutdown(),
        arguments=['-d', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files/demo_3d.rviz'],
        parameters = [{'use_sim_time': False}],
    )

    return LaunchDescription([
        # Launch arguments
        load_state_filename_arg,
        # Nodes
        robot_state_publisher_node,
        cartographer_node,
        cartographer_node_map,
        cartographer_occupancy_grid_node,
        rviz_node,
    ])

