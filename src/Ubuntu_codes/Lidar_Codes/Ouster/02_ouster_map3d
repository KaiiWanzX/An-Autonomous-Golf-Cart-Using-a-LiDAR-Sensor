#!/usr/bin/env python3
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, ExecuteProcess
from launch.conditions import IfCondition, UnlessCondition
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node, SetRemap
from launch_ros.substitutions import FindPackageShare
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import Shutdown
import os

def generate_launch_description():
    ## ***** Launch arguments *****
    output_pbstream_arg = DeclareLaunchArgument('output_pbstream', default_value="output_map.pbstream")
    use_sim_time_arg = DeclareLaunchArgument('use_sim_time', default_value='False')

  ## ***** File paths ******
    pkg_share = FindPackageShare('cartographer_ros').find('cartographer_ros')
    urdf_dir = os.path.join(pkg_share, 'urdf')
    urdf_file = os.path.join(urdf_dir, '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/urdf/os1.urdf')  
    with open(urdf_file, 'r') as infp:
        robot_desc = infp.read()

    ## ***** Nodes *****
    os1_node = Node(
    package='ouster_ros',
    executable='os_sensor',
    name='os1_node',
    output='screen',
    parameters=[
        {'lidar_mode': '1024x10'},
        {'replay': False},  
        {'os1_udp_dest': '169.254.244.212'},
        {'os1_lidar_port': '7502'},
        {'os1_imu_port': '7503'},
        {'metadata': '/home/pae/ros2_ws/os-122325000057-metadata.json'},
        ],
    )

    robot_state_publisher_node = Node(
        package = 'robot_state_publisher',
        executable = 'robot_state_publisher',
        parameters=[
            {'robot_description': robot_desc},
            {'use_sim_time': LaunchConfiguration('use_sim_time')}],
        output = 'screen'
        )

    cartographer_node = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_node',
        parameters=[{'use_sim_time': LaunchConfiguration('use_sim_time')}],
        arguments=[
            '-configuration_directory', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files',
            '-configuration_basename', 'os1_32 _map3d.lua', 
            '-save_state_filename', LaunchConfiguration('output_pbstream')],
        remappings=[
            ('points2_1', '/ouster/points'),  
            ('points2_2', '/ouster/points2'),
            ('imu', '/ouster/imu'),
            ],
        output='screen'
        )

    cartographer_occupancy_grid_node = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_occupancy_grid_node',
        parameters = [
            {'use_sim_time': True},
            {'resolution': 0.05}],
        )

    rviz_node = Node(
        package = 'rviz2',
        executable = 'rviz2',
        on_exit = Shutdown(),
        arguments = ['-d', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files/demo_3d.rviz'],
        parameters = [{'use_sim_time': True}],
    )

    return LaunchDescription([
        # Launch arguments
        use_sim_time_arg,
        # Nodes
        os1_node,
        robot_state_publisher_node,
        cartographer_node,
        cartographer_occupancy_grid_node,
        rviz_node,
    ])

