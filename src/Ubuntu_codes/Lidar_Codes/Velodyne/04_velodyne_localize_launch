#!/usr/bin/env python3

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, ExecuteProcess
from launch.conditions import IfCondition, UnlessCondition
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node, SetRemap
from launch_ros.substitutions import FindPackageShare
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import Shutdown
import os

def generate_launch_description():
    ## ***** Launch arguments *****
    load_state_filename_arg = DeclareLaunchArgument('load_state_filename', default_value="")  # Path to your .pbstream map file

  ## ***** File paths ******
    pkg_share = FindPackageShare('cartographer_ros').find('cartographer_ros')
    urdf_file = os.path.join('/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/urdf/velodyne3_.urdf') 
        robot_desc = infp.read()

    ## ***** Nodes *****
    velodyne =Node(
            package='velodyne_driver',
            executable='velodyne_driver_node',
            name='velodyne_driver_node',
            output='screen',
            parameters=[
                {'device_ip': '192.168.1.201'},  
                {'frame_id': 'velodyne'},
                {'model': 'VLP16'},
            ],
     )

    robot_state_publisher_node = Node(
        package = 'robot_state_publisher',
        executable = 'robot_state_publisher',
        parameters=[
            {'robot_description': robot_desc},
            {'use_sim_time': False}],
        output = 'screen'
        )
  
    cartographer_node = Node(
        package='cartographer_ros',
        executable='cartographer_node',
        parameters=[
            {'use_sim_time': False},
        ],
        arguments=[
            '-configuration_directory', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files',           
            '-configuration_basename', '3velodyne_16 _2d_2.lua',  
            '-load_state_filename', LaunchConfiguration('load_state_filename'),
            ],
        remappings=[
            ('scan1', '/scan')

        ],
        output='screen'
    )

    cartographer_node_map = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_node',
        parameters = [{'use_sim_time': False}],
        arguments = [
            '-configuration_directory', FindPackageShare('cartographer_ros').find('cartographer_ros') + '/configuration_files',
            '-configuration_basename', 'backpack_2d_localization.lua', 
            '-load_state_filename', LaunchConfiguration('load_state_filename'),],
        remappings = [
            ('scan1', 'scan_matched_points2')
        ],
        output = 'screen'
        )

    cartographer_occupancy_grid_node = Node(
        package = 'cartographer_ros',
        executable = 'cartographer_occupancy_grid_node',
        parameters = [
            {'use_sim_time': False},
            {'resolution': 0.05}],
        )

    rviz_node = Node(
        package = 'rviz2',
        executable = 'rviz2',
        on_exit = Shutdown(),
        arguments=['-d', '/home/pae/ros2_ws/src/cartographer_ros/cartographer_ros/configuration_files/demo_2d.rviz'],
        parameters = [{'use_sim_time': False}],
    )

    return LaunchDescription([
        # Launch arguments
        load_state_filename_arg,
        # Nodes
        velodyne,
        robot_state_publisher_node,
        cartographer_node,
        cartographer_node_map,
        cartographer_occupancy_grid_node,
        rviz_node,
    ])

